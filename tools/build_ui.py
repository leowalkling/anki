import os
from os import path as osp
import shutil
from glob import glob
import subprocess
import logging
import runpy
import importlib
import importlib.util
from itertools import islice, chain

log = logging.getLogger(__name__)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    for expected_folder in ["anki", "aqt", "designer", "lib", "locale", "tests"]:
        if not osp.exists(expected_folder):
            raise RuntimeError("build_ui must be run from the root dir of the anki repo")

    init = osp.join('aqt', 'forms', '__init__.py')
    temp = osp.join('aqt', 'forms', 'scratch')
    dest = osp.join('aqt', 'forms')
    pyuic5 = shutil.which("pyuic5")

    spec = importlib.util.spec_from_file_location("tools", osp.join(osp.split(__file__)[0], "substitute_translate.py"))
    substitute_translate = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(substitute_translate)

    modules = []

    with open(init, "w") as init_file:
        init_file.writelines([
"""# This file auto-generated by build_ui.sh. Don't edit.
__all__ = [
"""
        ])

        log.info("Generating forms...")
        for ui_file in glob(osp.join('designer', '*.ui')):
            filename_ui_file = osp.split(ui_file)[1]
            name = osp.splitext(filename_ui_file)[0]
            modules.append(name)
            generated_python_module = osp.join(dest, name + ".py")
            subprocess.check_call([pyuic5, "-o", generated_python_module, "--from-imports", ui_file])
            substitute_translate.substitute_translate_in_generated_ui_py_script(generated_python_module)
            log.info(f"* {name}")

        init_file.write("\n".join(
            (chain((f"    \"{m:s}\"," for m in modules),
                   ["]", ""],
                   (f"from . import {m:s}" for m in modules),
                   [""]))))

